name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run unit tests
      run: |
        python -m unittest discover tests -v
    
    - name: Run metrics tests
      run: |
        python -m unittest tests.test_metrics_collector -v
    
    - name: Run document validation tests
      run: |
        python -m unittest tests.test_doc_validation -v
    
    - name: Generate test coverage
      run: |
        pytest tests/ --cov=greeum --cov-report=xml --cov-report=term
      continue-on-error: true

  metrics:
    name: Metrics Collection & Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run metrics dashboard test
      run: |
        python -c "from greeum.core.metrics_collector import MetricsCollector; c = MetricsCollector(); print('Metrics system initialized')"
    
    - name: Test CLI commands
      run: |
        python -m greeum.cli metrics --help
        python -m greeum.cli validate --help

  documentation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate documentation examples
      run: |
        python -c "
from greeum.core.doc_validator import DocumentValidator
from pathlib import Path
import sys

docs_dir = Path('docs')
if docs_dir.exists():
    validator = DocumentValidator(docs_dir)
    examples = validator.extract_examples()
    print(f'Found {len(examples)} examples')
    passed, failed = validator.validate_all()
    print(f'Validation: {passed} passed, {failed} failed')
    if failed > 0:
        sys.exit(1)
else:
    print('No docs directory found')
"
      continue-on-error: true

  integration:
    name: E2E Integration Tests
    runs-on: ubuntu-latest
    needs: [test, metrics, documentation]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run E2E integration tests
      run: |
        python test_e2e_integration.py
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          *.log
          test-results/
      continue-on-error: true

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: integration
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance benchmarks
      run: |
        python -c "
import time
from greeum.core import BlockManager, DatabaseManager

# Simple performance test
db_manager = DatabaseManager()
block_manager = BlockManager(db_manager)

start = time.time()
for i in range(100):
    block_manager.add_block(
        context=f'Test memory {i}',
        keywords=['test'],
        tags=['benchmark'],
        embedding=[0.0] * 768,
        importance=0.5
    )
end = time.time()

print(f'Added 100 blocks in {end-start:.2f} seconds')
print(f'Average: {(end-start)/100*1000:.1f}ms per block')
"
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run flake8
      run: |
        flake8 greeum/ --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true
    
    - name: Check black formatting
      run: |
        black --check greeum/
      continue-on-error: true
    
    - name: Check import sorting
      run: |
        isort --check-only greeum/
      continue-on-error: true