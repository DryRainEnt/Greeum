name: Essential Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    name: "🎯 Essential Check (Python ${{ matrix.python-version }})"
    timeout-minutes: 5
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: 1. Syntax Check
      run: |
        python -m py_compile greeum/__init__.py
        python -m py_compile greeum/client.py
        python -m py_compile greeum/utils.py
        python -m py_compile greeum/core/database_manager.py
        python -m py_compile greeum/core/block_manager.py
        
    - name: 2. Basic Import Test
      run: |
        python -c "import greeum; print('✅ Basic import OK')"
        python -c "from greeum import BlockManager, DatabaseManager; print('✅ Core modules OK')"
        python -c "from greeum.client import MemoryClient; print('✅ Client OK')"
        
    - name: 3. Essential Function Test
      run: |
        python -c "
        import tempfile, os
        from greeum.core.database_manager import DatabaseManager
        from greeum.core.block_manager import BlockManager
        
        # 임시 DB로 기본 기능 테스트
        with tempfile.TemporaryDirectory() as tmpdir:
            db_path = os.path.join(tmpdir, 'test.db')
            
            # 데이터베이스 매니저 초기화
            db_manager = DatabaseManager(db_path=db_path)
            block_manager = BlockManager(db_manager)
            
            # 메모리 추가
            result = block_manager.add_memory('테스트 메모리', importance=0.8)
            print(f'✅ Memory add result: {result}')
            
            # 기본 통계 확인 (메모리가 추가되었는지)
            try:
                # SQLite에서 직접 확인
                import sqlite3
                conn = sqlite3.connect(db_path)
                count = conn.execute('SELECT COUNT(*) FROM long_term_memory').fetchone()[0]
                conn.close()
                assert count > 0, 'No memories found in database'
                print(f'✅ Database has {count} memories')
            except Exception as e:
                print(f'Database check failed: {e}')
                
        print('🎉 Core functions working!')
        "
        
    - name: 4. Hidden Dependencies Check  
      run: |
        # 숨은 의존성 확인 (CI 실패의 주원인)
        python -c "
        try:
            import sqlite3, json, datetime, hashlib, re
            print('✅ Standard library OK')
            
            import numpy, sqlalchemy, flask, requests
            print('✅ Major dependencies OK')
            
        except ImportError as e:
            print(f'❌ Missing dependency: {e}')
            exit(1)
        "